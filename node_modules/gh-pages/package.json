{
  "_args": [
    [
      {
        "raw": "gh-pages",
        "scope": null,
        "escapedName": "gh-pages",
        "name": "gh-pages",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/home/kelvinmaues/Projects/kelvinmaues.github.io"
    ]
  ],
  "_from": "gh-pages@latest",
  "_id": "gh-pages@1.0.0",
  "_inCache": true,
  "_location": "/gh-pages",
  "_nodeVersion": "7.7.4",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/gh-pages-1.0.0.tgz_1494299377835_0.7143452886957675"
  },
  "_npmUser": {
    "name": "tschaub",
    "email": "tim.schaub@gmail.com"
  },
  "_npmVersion": "4.1.2",
  "_phantomChildren": {
    "array-union": "1.0.2",
    "glob": "7.1.2",
    "graceful-readlink": "1.0.1",
    "lodash": "4.17.4",
    "object-assign": "4.1.1",
    "pify": "2.3.0",
    "pinkie-promise": "2.0.1"
  },
  "_requested": {
    "raw": "gh-pages",
    "scope": null,
    "escapedName": "gh-pages",
    "name": "gh-pages",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#DEV:/",
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/gh-pages/-/gh-pages-1.0.0.tgz",
  "_shasum": "4a46f4c25439f7a2b7e6835504d4a49e949f04ca",
  "_shrinkwrap": null,
  "_spec": "gh-pages",
  "_where": "/home/kelvinmaues/Projects/kelvinmaues.github.io",
  "author": {
    "name": "Tim Schaub",
    "url": "http://tschaub.net/"
  },
  "bin": {
    "gh-pages": "bin/gh-pages",
    "gh-pages-clean": "bin/gh-pages-clean"
  },
  "bugs": {
    "url": "https://github.com/tschaub/gh-pages/issues"
  },
  "config": {
    "js": "lib test bin plugin.js"
  },
  "dependencies": {
    "async": "2.1.4",
    "base64url": "^2.0.0",
    "commander": "2.9.0",
    "fs-extra": "^3.0.1",
    "globby": "^6.1.0",
    "graceful-fs": "4.1.11",
    "rimraf": "^2.5.4"
  },
  "description": "Publish to a gh-pages branch on GitHub (or any other branch on any other remote)",
  "devDependencies": {
    "chai": "^3.5.0",
    "dir-compare": "^1.4.0",
    "eslint": "^3.10.2",
    "eslint-config-tschaub": "^7.0.0",
    "mocha": "^3.1.2",
    "sinon": "^1.17.3",
    "tmp": "0.0.31"
  },
  "directories": {},
  "dist": {
    "shasum": "4a46f4c25439f7a2b7e6835504d4a49e949f04ca",
    "tarball": "https://registry.npmjs.org/gh-pages/-/gh-pages-1.0.0.tgz"
  },
  "engines": {
    "node": ">=4"
  },
  "eslintConfig": {
    "extends": "tschaub"
  },
  "gitHead": "eaf6295cf1fa95d0117745b2b267129055d0400f",
  "homepage": "https://github.com/tschaub/gh-pages",
  "keywords": [
    "git",
    "gh-pages",
    "github"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "tschaub",
      "email": "tim.schaub@gmail.com"
    },
    {
      "name": "markdalgleish",
      "email": "mark.john.dalgleish@gmail.com"
    }
  ],
  "name": "gh-pages",
  "optionalDependencies": {},
  "readme": "# gh-pages\n\nPublish files to a `gh-pages` branch on GitHub (or any other branch anywhere else).\n\n## Getting Started\n\n```shell\nnpm install gh-pages --save-dev\n```\n\nThis module requires Git `>=1.9`.\n\n## Basic Usage\n\n```js\nvar ghpages = require('gh-pages');\nvar path = require('path');\n\nghpages.publish('dist', function(err) {});\n```\n\n\n## `publish`\n\n```js\nghpages.publish(dir, callback);\n// or...\nghpages.publish(dir, options, callback);\n```\n\nCalling this function will create a temporary clone of the current repository, create a `gh-pages` branch if one doesn't already exist, copy over all files from the base path, or only those that match patterns from the optional `src` configuration, commit all changes, and push to the `origin` remote.\n\nIf a `gh-pages` branch already exists, it will be updated with all commits from the remote before adding any commits from the provided `src` files.\n\n**Note** that any files in the `gh-pages` branch that are *not* in the `src` files **will be removed**.  See the [`add` option](#optionsadd) if you don't want any of the existing files removed.\n\n\n### <a id=\"dir\">`dir`</a>\n* type: `string`\n\nThe base directory for all source files (those listed in the `src` config property).\n\nExample use:\n\n```js\n/**\n * Given the following directory structure:\n *\n *   dist/\n *     index.html\n *     js/\n *       site.js\n *\n * The usage below will create a `gh-pages` branch that looks like this:\n *\n *   index.html\n *   js/\n *     site.js\n *\n */\nghpages.publish('dist', callback);\n```\n\n\n### Options\n\nThe default options work for simple cases.  The options described below let you push to alternate branches, customize your commit messages, and more.\n\n\n#### <a id=\"optionssrc\">options.src</a>\n * type: `string|Array<string>`\n * default: `'**/*'`\n\nThe [minimatch](https://github.com/isaacs/minimatch) pattern or array of patterns used to select which files should be published.\n\n\n#### <a id=\"optionsbranch\">options.branch</a>\n * type: `string`\n * default: `'gh-pages'`\n\nThe name of the branch you'll be pushing to.  The default uses GitHub's `gh-pages` branch, but this can be configured to push to any branch on any remote.\n\nExample use of the `branch` option:\n\n```js\n/**\n * This task pushes to the `master` branch of the configured `repo`.\n */\nghpages.publish('dist', {\n  branch: 'master',\n  repo: 'https://example.com/other/repo.git'\n}, callback);\n```\n\n\n#### <a id=\"optionsdest\">options.dest</a>\n * type: `string`\n * default: `'.'`\n\nThe destination folder within the destination branch.  By default, all files are published to the root of the repository.\n\nExample use of the `dest` option:\n\n```js\n/**\n * Place content in the static/project subdirectory of the target\n * branch.\n */\nghpages.publish('dist', {\n  dest: 'static/project'\n}, callback);\n```\n\n#### <a id=\"optionsdotfiles\">options.dotfiles</a>\n * type: `boolean`\n * default: `false`\n\nInclude dotfiles.  By default, files starting with `.` are ignored unless they are explicitly provided in the `src` array.  If you want to also include dotfiles that otherwise match your `src` patterns, set `dotfiles: true` in your options.\n\nExample use of the `dotfiles` option:\n\n```js\n/**\n * The usage below will push dotfiles (directories and files)\n * that otherwise match the `src` pattern.\n */\nghpages.publish('dist', {dotfiles: true}, callback);\n```\n\n\n#### <a id=\"optionsadd\">options.add</a>\n * type: `boolean`\n * default: `false`\n\nOnly add, and never remove existing files.  By default, existing files in the target branch are removed before adding the ones from your `src` config.  If you want the task to add new `src` files but leave existing ones untouched, set `add: true` in your options.\n\nExample use of the `add` option:\n\n```js\n/**\n * The usage below will only add files to the `gh-pages` branch, never removing\n * any existing files (even if they don't exist in the `src` config).\n */\nghpages.publish('dist', {add: true}, callback);\n```\n\n\n#### <a id=\"optionsrepo\">options.repo</a>\n * type: `string`\n * default: url for the origin remote of the current dir (assumes a git repository)\n\nBy default, `gh-pages` assumes that the current working directory is a git repository, and that you want to push changes to the `origin` remote.\n\nIf instead your script is not in a git repository, or if you want to push to another repository, you can provide the repository URL in the `repo` option.\n\nExample use of the `repo` option:\n\n```js\n/**\n * If the current directory is not a clone of the repository you want to work\n * with, set the URL for the repository in the `repo` option.  This usage will\n * push all files in the `src` config to the `gh-pages` branch of the `repo`.\n */\nghpages.publish('dist', {\n  repo: 'https://example.com/other/repo.git'\n}, callback);\n```\n\n\n#### <a id=\"optionsremote\">options.remote</a>\n * type: `string`\n * default: `'origin'`\n\nThe name of the remote you'll be pushing to.  The default is your `'origin'` remote, but this can be configured to push to any remote.\n\nExample use of the `remote` option:\n\n```js\n/**\n * This task pushes to the `gh-pages` branch of of your `upstream` remote.\n */\nghpages.publish('dist', {\n  remote: 'upstream'\n}, callback);\n```\n\n\n#### <a id=\"optionstag\">options.tag</a>\n * type: `string`\n * default: `''`\n\nCreate a tag after committing changes on the target branch.  By default, no tag is created.  To create a tag, provide the tag name as the option value.\n\n\n#### <a id=\"optionsmessage\">options.message</a>\n * type: `string`\n * default: `'Updates'`\n\nThe commit message for all commits.\n\nExample use of the `message` option:\n\n```js\n/**\n * This adds commits with a custom message.\n */\nghpages.publish('dist', {\n  message: 'Auto-generated commit'\n}, callback);\n```\n\n\n#### <a id=\"optionsuser\">options.user</a>\n * type: `Object`\n * default: `null`\n\nIf you are running the `gh-pages` task in a repository without a `user.name` or `user.email` git config properties (or on a machine without these global config properties), you must provide user info before git allows you to commit.  The `options.user` object accepts `name` and `email` string values to identify the committer.\n\nExample use of the `user` option:\n\n```js\nghpages.publish('dist', {\n  user: {\n    name: 'Joe Code',\n    email: 'coder@example.com'\n  }\n}, callback);\n```\n\n\n#### <a id=\"optionsclone\">options.clone</a>\n * type: `string`\n * default: temporary directory inside the `gh-pages` directory\n\nPath to a directory where your repository will be cloned.  If this directory doesn't already exist, it will be created.  If it already exists, it is assumed to be a clone of your repository.\n\nExample use of the `clone` option:\n\n```js\n/**\n * If you already have a temp directory, and want the repository cloned there,\n * use the `clone` option as below.  To avoid re-cloning every time the task is\n * run, this should be a directory that sticks around for a while.\n */\nghpages.publish('dist', {\n  clone: 'path/to/tmp/dir'\n}, callback);\n```\n\n\n#### <a id=\"optionspush\">options.push</a>\n * type: `boolean`\n * default: `true`\n\nPush branch to remote.  To commit only (with no push) set to `false`.\n\nExample use of the `push` option:\n\n```js\nghpages.publish('dist', {push: false}, callback);\n```\n\n\n#### <a id=\"optionssilent\">options.silent</a>\n * type: `boolean`\n * default: `false`\n\nAvoid showing repository URLs or other information in errors.\n\nExample use of the `silent` option:\n\n```js\n/**\n * This configuration will avoid logging the GH_TOKEN if there is an error.\n */\nghpages.publish('dist', {\n  repo: 'https://' + process.env.GH_TOKEN + '@github.com/user/private-repo.git',\n  silent: true\n}, callback);\n```\n\n\n#### <a id=\"optionsgit\">options.git</a>\n * type: `string`\n * default: `'git'`\n\nYour `git` executable.\n\nExample use of the `git` option:\n\n```js\n/**\n * If `git` is not on your path, provide the path as shown below.\n */\nghpages.publish('dist', {\n  git: '/path/to/git'\n}, callback);\n```\n\n## Command Line Utility\n\nInstalling the package creates a `gh-pages` command line utility.  Run `gh-pages --help` to see a list of supported options.\n\nWith a local install of `gh-pages`, you can set up a package script with something like the following:\n\n```shell\n\"scripts\": {\n  \"deploy\": \"gh-pages -d dist\"\n}\n```\n\nAnd then to publish everything from your `dist` folder to your `gh-pages` branch, you'd run this:\n\n```shell\nnpm run deploy\n```\n\n## Debugging\n\nTo get additional output from the `gh-pages` script, set `NODE_DEBUG=gh-pages`.  For example:\n\n```shell\nNODE_DEBUG=gh-pages npm run deploy\n```\n\n## Dependencies\n\nNote that this plugin requires Git 1.9 or higher (because it uses the `--exit-code` option for `git ls-remote`).  If you'd like to see this working with earlier versions of Git, please [open an issue](https://github.com/tschaub/gh-pages/issues).\n\n[![Current Status](https://secure.travis-ci.org/tschaub/gh-pages.svg?branch=master)](https://travis-ci.org/tschaub/gh-pages)\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/tschaub/gh-pages.git"
  },
  "scripts": {
    "fix-lint": "eslint --fix $npm_package_config_js",
    "pretest": "eslint $npm_package_config_js",
    "test": "mocha --recursive test"
  },
  "version": "1.0.0"
}
